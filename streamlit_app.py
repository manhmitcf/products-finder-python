import streamlit as st
import requests
import pandas as pd
import json
from datetime import datetime
import time

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Products Finder - T√¨m ki·∫øm s·∫£n ph·∫©m th√¥ng minh (Chunked)",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .search-box {
        font-size: 1.1rem;
        padding: 0.5rem;
        border-radius: 10px;
        border: 2px solid #1f77b4;
    }
    .result-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #1f77b4;
        margin-bottom: 1rem;
    }
    .score-badge {
        background-color: #28a745;
        color: white;
        padding: 0.2rem 0.5rem;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: bold;
    }
    .chunk-badge {
        background-color: #17a2b8;
        color: white;
        padding: 0.2rem 0.5rem;
        border-radius: 15px;
        font-size: 0.7rem;
        font-weight: bold;
        margin-left: 0.5rem;
    }
    .sidebar-info {
        background-color: #e3f2fd;
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
    }
    .improvement-badge {
        background-color: #28a745;
        color: white;
        padding: 0.3rem 0.6rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: bold;
        margin-left: 1rem;
    }
</style>
""", unsafe_allow_html=True)

# H√†m g·ªçi API
def search_products(query, limit=5, api_url="http://localhost:8001"):
    """G·ªçi API ƒë·ªÉ t√¨m ki·∫øm s·∫£n ph·∫©m v·ªõi chunking"""
    try:
        response = requests.post(
            f"{api_url}/search",
            json={"text": query, "limit": limit, "chunk_limit": limit * 4},
            timeout=30
        )
        if response.status_code == 200:
            return response.json(), None
        else:
            return None, f"L·ªói API: {response.status_code} - {response.text}"
    except requests.exceptions.ConnectionError:
        return None, "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API. Vui l√≤ng ki·ªÉm tra xem API server ƒë√£ ch·∫°y ch∆∞a."
    except requests.exceptions.Timeout:
        return None, "Timeout: API m·∫•t qu√° nhi·ªÅu th·ªùi gian ƒë·ªÉ ph·∫£n h·ªìi."
    except Exception as e:
        return None, f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}"

# H√†m l·∫•y th√¥ng tin v·ªÅ chunking
def get_chunking_info(api_url="http://localhost:8001"):
    """L·∫•y th√¥ng tin v·ªÅ d·ªØ li·ªáu chunked"""
    try:
        response = requests.get(f"{api_url}/info", timeout=10)
        if response.status_code == 200:
            return response.json(), None
        else:
            return None, f"L·ªói API: {response.status_code}"
    except:
        return None, "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin chunking"

# H√†m ki·ªÉm tra tr·∫°ng th√°i API
def check_api_status(api_url="http://localhost:8001"):
    """Ki·ªÉm tra xem API c√≥ ho·∫°t ƒë·ªông kh√¥ng"""
    try:
        response = requests.get(f"{api_url}/docs", timeout=5)
        return response.status_code == 200
    except:
        return False

# Header ch√≠nh
st.markdown('<h1 class="main-header">üîç Products Finder <span class="improvement-badge">‚ú® Chunked</span></h1>', unsafe_allow_html=True)
st.markdown('<p style="text-align: center; font-size: 1.2rem; color: #666;">T√¨m ki·∫øm s·∫£n ph·∫©m th√¥ng minh v·ªõi c√¥ng ngh·ªá AI v√† Text Chunking</p>', unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.markdown('<div class="sidebar-info">', unsafe_allow_html=True)
    st.markdown("### ‚öôÔ∏è C·∫•u h√¨nh")
    
    # C·∫•u h√¨nh API URL
    api_url = st.text_input(
        "üåê API URL", 
        value="http://localhost:8001",
        help="URL c·ªßa API server (chunked version)"
    )
    
    # S·ªë l∆∞·ª£ng k·∫øt qu·∫£
    limit = st.slider(
        "üìä S·ªë k·∫øt qu·∫£ t·ªëi ƒëa", 
        min_value=1, 
        max_value=20, 
        value=5,
        help="S·ªë l∆∞·ª£ng s·∫£n ph·∫©m t·ªëi ƒëa mu·ªën hi·ªÉn th·ªã"
    )
    
    # Ki·ªÉm tra tr·∫°ng th√°i API v√† th√¥ng tin chunking
    st.markdown("### üîå Tr·∫°ng th√°i API")
    if st.button("Ki·ªÉm tra k·∫øt n·ªëi"):
        with st.spinner("ƒêang ki·ªÉm tra..."):
            if check_api_status(api_url):
                st.success("‚úÖ API ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng")
                
                # L·∫•y th√¥ng tin chunking
                info, error = get_chunking_info(api_url)
                if info:
                    st.markdown("### üìä Th√¥ng tin Chunking")
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("T·ªïng chunks", info.get('total_chunks', 0))
                        st.metric("S·∫£n ph·∫©m", info.get('unique_products', 0))
                    with col2:
                        st.metric("TB chunks/SP", info.get('average_chunks_per_product', 0))
                        st.metric("Max chunks/SP", info.get('max_chunks_per_product', 0))
            else:
                st.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API")
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Th√¥ng tin v·ªÅ chunking
    st.markdown("### üß© Text Chunking")
    st.markdown("""
    **C·∫£i ti·∫øn m·ªõi:**
    - ‚úÇÔ∏è Chia nh·ªè m√¥ t·∫£ d√†i th√†nh c√°c ƒëo·∫°n ng·∫Øn
    - üéØ T√¨m ki·∫øm ch√≠nh x√°c h∆°n trong n·ªôi dung chi ti·∫øt
    - üöÄ TƒÉng t·ªëc ƒë·ªô x·ª≠ l√Ω v√† ƒë·ªô ch√≠nh x√°c
    - üîÑ G·ªôp k·∫øt qu·∫£ t·ª´ nhi·ªÅu ƒëo·∫°n vƒÉn
    """)
    
    # Th√¥ng tin h∆∞·ªõng d·∫´n
    st.markdown("### üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
    st.markdown("""
    1. **Nh·∫≠p t·ª´ kh√≥a** t√¨m ki·∫øm v√†o √¥ b√™n d∆∞·ªõi
    2. **Nh·∫•n Enter** ho·∫∑c click n√∫t T√¨m ki·∫øm
    3. **Xem k·∫øt qu·∫£** ƒë∆∞·ª£c s·∫Øp x·∫øp theo ƒë·ªô li√™n quan
    4. **Click v√†o link** ƒë·ªÉ xem chi ti·∫øt s·∫£n ph·∫©m
    5. **Xem s·ªë chunks** t√¨m th·∫•y cho m·ªói s·∫£n ph·∫©m
    """)
    
    # V√≠ d·ª• t√¨m ki·∫øm
    st.markdown("### üí° V√≠ d·ª• t√¨m ki·∫øm")
    example_queries = [
        "s·ªØa r·ª≠a m·∫∑t cho da d·∫ßu",
        "kem ch·ªëng n·∫Øng SPF 50",
        "serum vitamin C",
        "m·∫∑t n·∫° d∆∞·ª°ng ·∫©m",
        "toner cho da nh·∫°y c·∫£m"
    ]
    
    for query in example_queries:
        if st.button(f"üîç {query}", key=f"example_{query}"):
            st.session_state.search_query = query

# Kh·ªüi t·∫°o session state
if 'search_history' not in st.session_state:
    st.session_state.search_history = []
if 'search_query' not in st.session_state:
    st.session_state.search_query = ""

# Giao di·ªán t√¨m ki·∫øm ch√≠nh
col1, col2 = st.columns([4, 1])

with col1:
    search_query = st.text_input(
        "üîç Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm:",
        value=st.session_state.search_query,
        placeholder="V√≠ d·ª•: s·ªØa r·ª≠a m·∫∑t cho da nh·∫°y c·∫£m, kem d∆∞·ª°ng ch·ªëng l√£o h√≥a...",
        key="main_search"
    )

with col2:
    st.markdown("<br>", unsafe_allow_html=True)  # Spacer
    search_button = st.button("üöÄ T√¨m ki·∫øm", type="primary")

# X·ª≠ l√Ω t√¨m ki·∫øm
if search_button or (search_query and search_query != st.session_state.get('last_query', '')):
    if search_query.strip():
        st.session_state.last_query = search_query
        
        # Th√™m v√†o l·ªãch s·ª≠ t√¨m ki·∫øm
        if search_query not in st.session_state.search_history:
            st.session_state.search_history.insert(0, search_query)
            if len(st.session_state.search_history) > 10:
                st.session_state.search_history.pop()
        
        # Hi·ªÉn th·ªã loading
        with st.spinner(f"üîç ƒêang t√¨m ki·∫øm v·ªõi chunking '{search_query}'..."):
            start_time = time.time()
            results, error = search_products(search_query, limit, api_url)
            search_time = time.time() - start_time
        
        if error:
            st.error(f"‚ùå {error}")
            
            # G·ª£i √Ω kh·∫Øc ph·ª•c
            st.markdown("### üõ†Ô∏è C√°ch kh·∫Øc ph·ª•c:")
            st.markdown("""
            1. **Ki·ªÉm tra API server**: ƒê·∫£m b·∫£o API ƒëang ch·∫°y t·∫°i `http://localhost:8001`
            2. **Ch·∫°y API**: S·ª≠ d·ª•ng l·ªánh `python main_chunked.py`
            3. **Ki·ªÉm tra URL**: ƒê·∫£m b·∫£o URL API trong sidebar l√† ch√≠nh x√°c
            4. **Chunked data**: ƒê·∫£m b·∫£o ƒë√£ ch·∫°y `python load_data_with_chunking.py`
            """)
            
        elif results:
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            st.success(f"‚úÖ T√¨m th·∫•y {len(results)} k·∫øt qu·∫£ cho '{search_query}' trong {search_time:.2f}s")
            
            # Tabs cho c√°c c√°ch hi·ªÉn th·ªã kh√°c nhau
            tab1, tab2, tab3 = st.tabs(["üìã Danh s√°ch", "üìä B·∫£ng d·ªØ li·ªáu", "üìà Ph√¢n t√≠ch"])
            
            with tab1:
                # Hi·ªÉn th·ªã d·∫°ng card
                for i, item in enumerate(results, 1):
                    with st.container():
                        # Header v·ªõi th√¥ng tin chunking
                        chunk_info = ""
                        if item.get('total_chunks_found', 0) > 1:
                            chunk_info = f'<span class="chunk-badge">{item.get("total_chunks_found", 1)} chunks</span>'
                        
                        st.markdown(f"""
                        <div class="result-card">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <h3 style="margin: 0; color: #1f77b4;">#{i} {item.get('name', 'Kh√¥ng c√≥ t√™n')}</h3>
                                <div>
                                    <span class="score-badge">ƒêi·ªÉm: {item.get('score', 0):.3f}</span>
                                    {chunk_info}
                                </div>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Th√¥ng tin chi ti·∫øt
                        col1, col2 = st.columns([3, 1])
                        
                        with col1:
                            # Hi·ªÉn th·ªã m√¥ t·∫£ ch√≠nh
                            if item.get('descriptioninfo'):
                                st.write("üìù **M√¥ t·∫£ ch√≠nh:**", item['descriptioninfo'])
                            
                            # Hi·ªÉn th·ªã c√°c chunks li√™n quan kh√°c (n·∫øu c√≥)
                            if item.get('relevant_chunks') and len(item.get('relevant_chunks', [])) > 1:
                                with st.expander(f"üìÑ Xem th√™m {len(item.get('relevant_chunks', [])) - 1} ƒëo·∫°n li√™n quan"):
                                    for j, chunk in enumerate(item.get('relevant_chunks', [])[1:], 2):
                                        st.write(f"**ƒêo·∫°n {j}:** {chunk}")
                            
                            if item.get('url'):
                                st.markdown(f"üîó [Xem chi ti·∫øt s·∫£n ph·∫©m]({item['url']})")
                        
                        with col2:
                            # Th√¥ng tin s·∫£n ph·∫©m
                            if item.get('price'):
                                st.metric("Gi√°", f"{item['price']:,}ƒë")
                            if item.get('brand'):
                                st.write(f"üè∑Ô∏è **Th∆∞∆°ng hi·ªáu:** {item['brand']}")
                            if item.get('average_rating'):
                                st.write(f"‚≠ê **ƒê√°nh gi√°:** {item['average_rating']}/5")
                            st.metric("ƒê·ªô li√™n quan", f"{item.get('score', 0):.1%}")
                        
                        st.divider()
            
            with tab2:
                # Hi·ªÉn th·ªã d·∫°ng b·∫£ng
                df_results = pd.DataFrame(results)
                if not df_results.empty:
                    # L√†m tr√≤n score
                    if 'score' in df_results.columns:
                        df_results['score'] = df_results['score'].round(3)
                    
                    # C·∫Øt ng·∫Øn m√¥ t·∫£
                    if 'descriptioninfo' in df_results.columns:
                        df_results['descriptioninfo'] = df_results['descriptioninfo'].apply(
                            lambda x: x[:100] + "..." if len(str(x)) > 100 else x
                        )
                    
                    # Th√™m c·ªôt chunks info
                    if 'total_chunks_found' in df_results.columns:
                        df_results['chunks'] = df_results['total_chunks_found']
                    
                    # Ch·ªçn c√°c c·ªôt hi·ªÉn th·ªã
                    display_columns = ['name', 'brand', 'price', 'score', 'chunks', 'descriptioninfo']
                    display_df = df_results[[col for col in display_columns if col in df_results.columns]]
                    
                    st.dataframe(
                        display_df,
                        use_container_width=True,
                        hide_index=True
                    )
                    
                    # N√∫t download
                    csv = df_results.to_csv(index=False, encoding='utf-8-sig')
                    st.download_button(
                        label="üì• T·∫£i xu·ªëng CSV",
                        data=csv,
                        file_name=f"chunked_search_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        mime="text/csv"
                    )
            
            with tab3:
                # Ph√¢n t√≠ch k·∫øt qu·∫£
                if results:
                    scores = [item.get('score', 0) for item in results]
                    chunks_counts = [item.get('total_chunks_found', 1) for item in results]
                    
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("ƒêi·ªÉm cao nh·∫•t", f"{max(scores):.3f}")
                    with col2:
                        st.metric("ƒêi·ªÉm trung b√¨nh", f"{sum(scores)/len(scores):.3f}")
                    with col3:
                        st.metric("T·ªïng chunks", sum(chunks_counts))
                    with col4:
                        st.metric("TB chunks/SP", f"{sum(chunks_counts)/len(chunks_counts):.1f}")
                    
                    # Bi·ªÉu ƒë·ªì ƒëi·ªÉm s·ªë
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown("**ƒêi·ªÉm t∆∞∆°ng ƒë·ªìng**")
                        chart_data = pd.DataFrame({
                            'S·∫£n ph·∫©m': [f"#{i+1}" for i in range(len(results))],
                            'ƒêi·ªÉm t∆∞∆°ng ƒë·ªìng': scores
                        })
                        st.bar_chart(chart_data.set_index('S·∫£n ph·∫©m'))
                    
                    with col2:
                        st.markdown("**S·ªë chunks t√¨m th·∫•y**")
                        chunk_chart_data = pd.DataFrame({
                            'S·∫£n ph·∫©m': [f"#{i+1}" for i in range(len(results))],
                            'S·ªë chunks': chunks_counts
                        })
                        st.bar_chart(chunk_chart_data.set_index('S·∫£n ph·∫©m'))
        else:
            st.warning("ü§∑‚Äç‚ôÇÔ∏è Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o ph√π h·ª£p.")
    else:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm.")

# L·ªãch s·ª≠ t√¨m ki·∫øm
if st.session_state.search_history:
    st.markdown("### üìö L·ªãch s·ª≠ t√¨m ki·∫øm")
    
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ d·∫°ng chips
    cols = st.columns(min(len(st.session_state.search_history), 5))
    for i, query in enumerate(st.session_state.search_history[:5]):
        with cols[i]:
            if st.button(f"üîÑ {query}", key=f"history_{i}"):
                st.session_state.search_query = query
                st.rerun()

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; padding: 2rem;">
    <p>üöÄ <strong>Products Finder</strong> - Powered by AI, Vector Search & Text Chunking</p>
    <p>ƒê∆∞·ª£c ph√°t tri·ªÉn v·ªõi ‚ù§Ô∏è b·∫±ng Streamlit & FastAPI</p>
    <p><small>‚ú® Phi√™n b·∫£n Chunked - T√¨m ki·∫øm ch√≠nh x√°c h∆°n v·ªõi m√¥ t·∫£ d√†i</small></p>
</div>
""", unsafe_allow_html=True)